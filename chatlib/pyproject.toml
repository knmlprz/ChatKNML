[tool.poetry]
name = "chatlib"
version = "0.1.0"
description = ""
authors = ["Piotr Krawiec <piotr.krawiec23@gmail.com>"]
readme = "README.md"
packages = [{include = "chatlib"}]

[tool.poetry.dependencies]
python = "^3.10"
python-dotenv = "^1.0.0"
aiohttp = {extras = ["speedups"], version = "^3.9.0"}
pydantic = "^2.5.1"
langchain = "^0.0.329"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
ruff = "^0.1.5"
pytest-asyncio = "^0.21.1"
pyright = "^1.1.336"
black = "^23.11.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
markers = [
    "integration: mark a test as an integration test (deselect with '-m \"not integration\"')",
]

[tool.pyright]
include = ["chatlib"]
exclude = [
    "**/__pycache__",
]
useLibraryCodeForTypes = true
typeCheckingMode = "basic"

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.10"
pythonPlatform = "Linux"

[tool.ruff.lint]
select = [
       "E",
       "F",
       "I",
       "D",
       "W",
       "N",
       "UP",
       "YTT",
       "S",
       "B",
       "A",
       "COM",
       "C4",
       "T10",
       "DJ",
       "EM",
       "ICN",
       "PIE",
       "T20",
       "PYI",
       "Q",
       "RSE",
       "RET",
       "SLF",
       "SIM",
       "TD",
       "ERA",
       "PL",
       "TRY",
       "FLY",
       "RUF",
]


[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402", "S101"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88
max-line-length = 100 # E501 reports lines that exceed the length of 100.
